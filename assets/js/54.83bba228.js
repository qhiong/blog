(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{617:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"react中的hooks钩子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react中的hooks钩子"}},[t._v("#")]),t._v(" react中的Hooks钩子")]),t._v(" "),a("p",[t._v("hooks式react在函数式组件中封装好的api,可以在函数式组件中使用；不能放在条件语句中使用")]),t._v(" "),a("p",[t._v("1.useRef (在函数式组件中使用，而createRef只能在类组件中使用)")]),t._v(" "),a("ul",[a("li",[t._v("保存函数式组件中的值，不会因为render而重置")]),t._v(" "),a("li",[t._v("也具备ref的能力（createRef）,标记DOM获取DOM实例，标记组件获取组件实例")])]),t._v(" "),a("p",[t._v("2.useState")]),t._v(" "),a("ul",[a("li",[t._v("const [state,setState] = useState(initValue)\n"),a("ul",[a("li",[t._v("当initValue是简单类型时")]),t._v(" "),a("li",[t._v("当initValue是对象时，setState会将初始值直接覆盖，不会进行assign合并")])])])]),t._v(" "),a("p",[t._v("跟useRef一样，也可以使用多次")]),t._v(" "),a("p",[t._v("3.usecallback(fn, deps)")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("缓存的是函数本身")])]),t._v(" "),a("li",[t._v("当不传入deps时，使用useCallback相当于没有使用，当传入一个空数组时，会将里面的函数绑死。")]),t._v(" "),a("li",[t._v("当deps数组传入依赖项时，deps相当于一个监视器，当deps里面的数组值有改变时函数才会被重新更新。")]),t._v(" "),a("li",[t._v("尽量讲第二个参数写成[]，然后将依赖项放在回调的形参上，可以将性能最大化，但是调用的时候也还是会新创建函数，也是会消耗性能")])]),t._v(" "),a("p",[t._v("4.useMemo（() => computeExpensiveValue(a, b), [a, b]）")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("缓存的是函数的返回值")])])]),t._v(" "),a("li",[a("p",[t._v("把“创建”函数和依赖项数组作为参数传入 "),a("code",[t._v("useMemo")]),t._v("，它仅会在某个依赖项改变时才重新计算 memoized 值。")])]),t._v(" "),a("li",[a("p",[t._v("传入 "),a("code",[t._v("useMemo")]),t._v(" 的函数会在渲染期间执行。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 "),a("code",[t._v("useEffect")]),t._v(" 的适用范畴，而不是 "),a("code",[t._v("useMemo")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("如果没有提供依赖项数组，"),a("code",[t._v("useMemo")]),t._v(" 在每次渲染时都会计算新的值。")])])]),t._v(" "),a("p",[t._v("5.useEffect(副作用函数,[])")]),t._v(" "),a("ul",[a("li",[t._v("该 Hook 接收一个包含命令式、且可能有副作用代码的函数。默认在每一次render之后都会触发；无关渲染的业务逻辑叫做副作用")]),t._v(" "),a("li",[t._v("传入一个函数，每次在render之后都会去执行；会在ComponentDidUpdate和ComponentDidMount执行")]),t._v(" "),a("li",[t._v("也可以在这个函数里面返回一个函数，去清除副作用，会在每次添加副作用之前消除之前的副作用。在ComponentWillUpdate和ComponentWillUncount阶段消除")]),t._v(" "),a("li",[t._v("第二个参数是一个监听器，当监听器的数据发生改变之后才会重新执行，当监听器是一个[]时，就会锁死，相当于只是在ComponentDidMount执行了")])]),t._v(" "),a("p",[t._v("6.useImperativeHandle(ref,createhandle,[deps])")]),t._v(" "),a("ul",[a("li",[t._v("必须和refs转发forwordRef一起使用")]),t._v(" "),a("li",[t._v("实质上就是在子组件里面使用ref.current = {}")])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FancyInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" inputRef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useImperativeHandle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("focus")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      inputRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("focus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input ref"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("inputRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nFancyInput "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forwardRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("FancyInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("7.自定义hooks")]),t._v(" "),a("p",[t._v("另起一个js文件,使用use开头起名，然后将业务逻辑复制过去，导出，然后在需要的地方进行引用并解构")]),t._v(" "),a("p",[t._v("８.useLayoutEffect")]),t._v(" "),a("p",[t._v("与useEffect的使用一样，只是useLayoutEffect在每次渲染之前执行，一般用于提前的js动画渲染，而useEffect会在每次渲染之后执行的副作用")]),t._v(" "),a("p",[t._v("9.useReducer")]),t._v(" "),a("p",[t._v("**注意：**hooks的实现跟链表没有关系，但是hooks的存储是由链表的方式存储的，所以我们只能在顶层调用hooks，不能在循环和条件语句或嵌套函数中使用hooks")])])}),[],!1,null,null,null);s.default=e.exports}}]);